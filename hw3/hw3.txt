ECE 375
HW 3
Sean Rettig
2015-02-24

1.

a.

When an interrupt occurs (due to a rising edge on bit 0 of PORTD), it will read PINA and save the results in memory, incrementing the address each time so that all data remains available, up to 256 times (since 256 bytes are allocated).  It also stores a count of how many times this occured in memory.

b.

.include “m128def.inc”
.def mpr = r16                      ; Multi-purpose register
.def count = r17                    ; Assume R17 is initially 0
.ORG    $0000
START:  RJMP INIT
.ORG    $0002
        JMP ISR
.ORG    $0046
INIT:   ldi mpr, (1<<ISC01)|(1<<ISC00)  ; (1)
        sts EICRA, mpr                  ; (2)
        ldi mpr, (1<<INT0)              ; (3)
        out EIMSK, mpr                  ; (4)
        ldi mpr, (0<<0)                 ; (5)
        out DDRD, mpr                   ; (6)
        sei                             ; (7)
        LDI XH, high(CTR)
        LDI XL, low(CTR)
        LDI YH, high(DATA)
        LDI YL, low(DATA)
WAIT:   RJMP WAIT
.ORG    0x100F
ISR:    IN mpr, PINA
        ST Y+, mpr
        INC count
        ST X, count
        RETI
.DSEG
CTR:    .BYTE 1
DATA:   .BYTE 256

i.   Lines 1-2 set the two bits of the External Interrupt Control Register that correspond to INT0 to trigger on rising edges.
ii.  Lines 3-4 disable interrupts for all pins except INT0.
iii. Lines 5-6 ensure that bit 0 of PORTD is set to receive input by setting it to 0.
iv.  Line 7 enables interrupts globally.

2.

INIT:   ldi mpr, (1<<0)|(1<<3)|(1<<2)|(1<<1)
        out DDRA, mpr
        ldi mpr, (0<<0)|(0<<1)
        out DDRD, mpr
        ldi mpr, (1<<0)|(1<<1)
        out PORTD, mpr
        ldi mpr, (1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10)
        sts EICRA, mpr
        ldi mpr, (1<<INT0)|(1<<INT1)
        out EIMSK, mpr

3.

.include        "m128def.inc"
.def            mpr = r16
.def            counter = r17
.def            state = r18

.ORG            $0000
RJMP            Initialize
.ORG            $0020 ; Timer/Counter0 overflow interrupt vector
                RCALL Reload_Counter
                RETI
.ORG            $0046 ; End of interrupt vectors
Initialize:
                ; Initialize stack pointer
                ldi     mpr, HIGH(RAMEND)
                out     SPH, mpr
                ldi     mpr, LOW(RAMEND)
                out     SPL, mpr

                ; Initialize Timer/Counter 0
                ldi     mpr, (1<<CS02|1<<CS01|1<<CS00) 
                out     TCCR0, mpr      ; Set normal mode, prescale = 1024

                ; Initialize Timer/Counter 0 Interrupt
                ldi     mpr, (1<<OCIE0) ; Set Timer 0 OVF interrupt
                out     TIMSK, mpr      ; Set TIMSK
                clr     counter

                LDI counter, 100 ; Load loop count = 100

LOOP:
                IN mpr, TIFR ; Read in TIFR
                ANDI mpr, 0b00000001 ; Check if TOV0 set
                BREQ LOOP ; Loop if TOV0 not set
                LDI mpr, 0b00000001 ; Otherwise, Reset TOV0
                OUT TIFR, mpr ; Note - write 1 to reset
                DEC counter ; Decrement count
                BRNE LOOP ; Loop if count not equal to 0
                RET 
                
Reload_counter:
                LDI mpr, 99 ; (Re)load value for delay
                OUT TCNT0, mpr
                RET

4.

.include    "m128def.inc" ; Include definition file
.def        mpr = r16 ; Multi-purpose register
.ORG        $0000 ; Reset and Power On interrupt
            RCALL   initUSART1
            RJMP    Main
.ORG        $003E ; USART1, UDRE (Data Register Empty)
            RCALL   SendData
RETI ; Return from interrupt

Main:
            RCALL SendData
Loop:
            RJMP Loop

initUSART1:
            ; Initialize stack
            LDI     mpr, high(RAMEND)
            OUT     SPH, mpr
            LDI     mpr, low(RAMEND)
            OUT     SPL, mpr
            ; Initialize I/O Ports
            ldi     mpr, (1<<PD1) ; Set Port D pin 0 (RXD1) for input
            out     DDRD, mpr
            ; Initialize USART0
            ldi     mpr, (1<<U2X1) ; Set double data rate
            sts     UCSR1A, mpr
            ; Set baudrate at 9600
            ldi     mpr, high(207) ; Load high byte of 0x0340
            sts     UBRR1H, mpr ; UBRR0H in extended I/O space
            ldi     mpr, low(207) ; Load low byte of 0x0340
            sts     UBRR1L, mpr
            ; Set frame format: 8 data, 2 stop bits, asynchronous, even parity
            ldi     mpr, (0<<UMSEL1 | 1<<USBS1 | 1<<UCSZ11 | 1<<UCSZ10 | 1<<UPM11 | 0<<UPM10)
            sts     UCSR1C, mpr ; UCSR0C in extended I/O space
            ; Enable data register empty interrupts
            ldi     mpr, (1<<UDRIE1)
            sts     UCSR1B, mpr

            ret

SendData:
            sts UDR1, r17 ; Move data to transmit data buffer
            ret

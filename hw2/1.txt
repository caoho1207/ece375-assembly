1.

# Fetch cycle
MAR <- PC
MDR <- M(MAR)
IR_high <- MDR, PC <- PC + 1

MAR <- PC
MDR <- M(MAR)
IR_low <- MDR, PC <- PC + 1

# Execute cycle
AC_high <- X_high
AC_low <- X_low
AC <- AC - 1
X_high <- AC_high
X_low <- AC_low
MDR <- R3
MAR <- AC
M(MAR) <- MDR

# Execute cycle (optimized)
AC_high <- X_high
AC_low <- X_low
AC <- AC - 1, MDR <- R3
X_high <- AC_high, MAR <- AC
X_low <- AC_low, M(MAR) <- MDR

2.

# Fetch cycle
MAR <- PC
MDR <- M(MAR)
IR_high <- MDR, PC <- PC + 1

MAR <- PC
MDR <- M(MAR)
IR_low <- MDR, PC <- PC + 1

# Execute cycle
SP <- SP + 1
MAR <- SP, MDR <- M(MAR)
PC_low <- MDR, SP <- SP + 1
MAR <- SP, MDR <- M(MAR)
PC_low <- MDR

3.

a. (assuming the result is placed in R3)

XOR:    MOV R3, R1 ; Keep the original contents
        MOV R4, R2 ; Keep the original contents
        MOV R5, R1 ; Keep the original contents
        MOV R6, R2 ; Keep the original contents

        ; a ^ b = ~(~(a | b) | ~(~a | ~b))

        ; Left half
        OR  R3, R4
        COM R3

        ; Right half
        COM R5
        COM R6
        OR  R5, R6
        COM R5

        ; Together
        OR  R3, R5
        COM R3

b.

The top of the stack will contain the return address 0x0010, with the low byte pushed on first, then the high byte:

+------+
| 0x00 |
+------+
| 0x10 |
+------+
| etc. |
+------+
